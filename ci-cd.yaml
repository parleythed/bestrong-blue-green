trigger:
  branches:
    include:
      - '*'

pr:
  branches:
    include:
      - main

variables:
  - group: AllCredentials

stages:
  - stage: Build
    displayName: Build and Validate
    jobs:
      - job: HelmPackageAndTerraformValidate
        displayName: Helm Packaging and Terraform Validation
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: '1.9.8'

          - task: HelmInstaller@1
            displayName: Install Helm
            inputs:
              helmVersion: 'latest'

          - task: AzureCLI@2
            displayName: Display Azure CLI Version
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                az version
                az account show

          - task: AzureCLI@2
            displayName: Azure Login
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                az account show
                az account set --subscription $(ARM_SUBSCRIPTION_ID)

          - task: Bash@3
            displayName: Terraform Validate
            inputs:
              targetType: 'inline'
              script: |
                set -e
                cd ./terraform
                terraform init -backend=true
                terraform validate
                terraform fmt -check

          - task: Bash@3
            displayName: Package Helm Chart
            inputs:
              targetType: 'inline'
              script: |
                set -e
                cd helm  # Adjust path to your Helm chart directory
                helm lint
                helm package .

  - stage: BuildAndPush
    displayName: Build and Push Artifacts
    jobs:
      - job: HelmChartAndContainerBuild
        displayName: Build Helm Chart and Push to ACR
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: Azure Login
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
                az acr login -n $(ACR_NAME)

          - task: Bash@3
            displayName: Push Helm Chart to ACR
            inputs:
              targetType: 'inline'
              script: |
                set -e
                cd ./helm-charts
                helm lint
                helm package .
                helm push $(HELM_CHART_NAME)-*.tgz oci://$(ACR_NAME).azurecr.io/helm

  - stage: DeployToProduction
    displayName: Deploy to Production
    dependsOn:
      - Build
      - BuildAndPush
    condition: succeeded()
    jobs:
      - deployment: DeployToAKS
        displayName: Deploy to AKS
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: Azure Login and AKS Deployment
                  inputs:
                    azureSubscription: '$(ARM_SERVICE_CONNECTION)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_NAME)
                      
                      helm repo add myrepo oci://$(ACR_NAME).azurecr.io/helm
                      helm repo update
                      
                      helm upgrade --install $(HELM_CHART_NAME) myrepo/$(HELM_CHART_NAME) \
                        --version $(CHART_VERSION) \
                        --set ingress.host=$(DOMAIN)